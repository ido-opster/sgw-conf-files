{
  opster.mclb: {
    port: 9200,
    restServer.port: 8201
    healthChecker:{
            threadPool: 1,
            periodInMilliSeconds: 1000
        }
    nonRespondingBackendThreshold: 5
    route: {
    userParameter:"X-User-Id"
    }
    cacheConfiguration:{
        fastQueriesCacheSize: 5,
        slowQueriesCacheSize: 5,
        flushInternalInMilliseconds: 1000,
        reloadAfterFlushDelayInMilliseconds: 1000,
        reloadAndFlushBulkSize:2,
        esUrl:"http://localhost:9200",
        index:"mclb_slow_queries"
    }
    queriesComparer:{
        excludeFields: ["bla"],
        valueFields:[
            {
                type: "int",
                fieldName: "size",
                fullName: "/size",
                threshold: 4
            },
            {
                type: "time",
                fieldName: "timestamp",
                unit: "Seconds"
                threshold: 5
            }
        ]
    }
    backends: [
      {
        id: 1,
        url: "http://localhost:9200",
        default: true
      }
    ]
    tenants: {
      default: {
        patterns: ["acc-"],
        backends: [1]
      }
    },
    searchGateway: {
      heavySearchCostThreshold:1000
      slowSearchTimeInMilliThreshold:1000
      features: {
        script: {
          cost: 100,
          factors: {
            HEAVY: 3
          },
          classifier: {
            type: math
            config: {
              expression: "{{hasScript}}"
            }
            thresholds: {
              HEAVY: {
                gte: 1
              }
            }
          }
        },
        range: {
          cost: 1,
          factors: {
            LIGHT: 1,
            MEDIUM: 500,
            HEAVY: 1000
          },
          classifier: {
            type: math,
            config: {
              expression: "{{duration}}"
            },
            thresholds: {
              LIGHT: {
                lte: 1000
              },
              MEDIUM: {
                gt: 1000,
                lte: 10000
              },
              HEAVY: {
                gt: 10000
              }
            }
          }
        },
        regex: {
          cost: 100,
          factors: {
            LIGHT: 1,
            MEDIUM: 2,
            HEAVY: 3
          },
          classifier: {
            type: string,
            config: {
              startsWith: {
                values: [".*", "*"],
                cost: 100
              },
              contains: {
                values: ["*", ".*"],
                cost: 10
              }
            }
            thresholds: {
              LIGHT: {
                lte: 10
              },
              MEDIUM: {
                gt: 10,
                lte: 100
              },
              HEAVY: {
                gt: 100
              }
            }
          }
        },
        aggregation: {
          cost: 10,
          factors: {
            LIGHT: 1,
            MEDIUM: 2,
            HEAVY: 3
          },
          classifier: {
            type: math,
            config: {
              expression: "{{level}} * {{size}} * (10 * {{hasScripts}})"
            }
            thresholds: {
              LIGHT: {
                lte: 1000
              },
              MEDIUM: {
                gt: 1000,
                lte: 10000
              },
              HEAVY: {
                gt: 10000
              }
            }
          }
        }
        data: {
          cost: 10,
          factors: {
            LIGHT: 0,
            MEDIUM: 2,
            HEAVY: 3
          },
          classifier: {
            type: math,
            config: {
              expression: "{{shardsCount}} * {{docsCount}} + ({{size}} * 1024 * 1024 * 1024)"
            }
            thresholds: {
              LIGHT: {
                lte: 1000
              },
              MEDIUM: {
                gt: 1000,
                lte: 10000
              },
              HEAVY: {
                gt: 10000
              }
            }
          }
        }
      }
    }
  }
}
